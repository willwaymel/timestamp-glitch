 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var strftime = require('strftime');

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })



//returns unix stamp or null if there is a NaN error
function getUnixStamp(input) {
  // console.log("hello " + parseInt(input).toString().length + " " + input + " " + input.length + " " + typeof parseInt(input));
  if (parseInt(input).toString().length == input.length) {
    //it's a number
  var d = new Date(parseInt(input)).getTime();
    console.log(d + " im here");
  return d;
  } else {
  var d = new Date(input).getTime();
  return (isNaN(d) ? null : d);  
  }
  
}

app.get("/:id", function(req, res) {
  var qs = req.params.id;
  var responseobj = {'unix':0,'natural':""};
  var unixTime = getUnixStamp(qs);
  if (unixTime === null) {
    responseobj.unix = null;
    responseobj.natural = null;
  } else {
    responseobj.unix = unixTime;
    responseobj.natural = strftime('%B %d, %Y', new Date(unixTime));
  }
    res.end(JSON.stringify(responseobj));
  });

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

